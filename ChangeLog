2004-02-14  Michael Neuhauser  <mike@firmix.at>

	* base/include/asm-arm/GNUmakefile.*: added rtai_usi.h
	* base/arch/arm/hal/hal.*: include asm/rtai_usi.h
	* base/arch/arm/hal/hal.*: re-added "retmode" to rtai_realtime_irq[]
	(sched/api.c has extern decl with retmode, so we need it here)

2004-02-15  Paolo Mantegazza  <mantegazza@aero.polimi.it>

	* base/include/rtai_lxrt.h: added thread support for Linux server,
	  supporting Linux syscalls while remaining in hard real time.
	* base/include/rtai_sched.h: added declaration of light
	  rpc/receive/return to support the Linux syscall server.
	* base/include/asm-arm/rtai_lxrt.h and asm-i386/rtai_lxrt.h: added
	  declarations for Linux syscall registers.
	* base/sched/sched.*: added support to rpc to the Linux syscall
	  server, if installed.
	* base/sched/api.c: added specific light rpc/receive/return to
	  support the syscall server.
	* base/sched/sys.c: added an entry to create and init the Linux 
	  syscall server.

2004-02-14  Michael Neuhauser  <mike@firmix.at>

	* base/arch/arm/hal/hal.*: define rt_scheduling[] unconditionally,
	i.e. not depending on CONFIG_RTAI_SCHED_ISR_LOCK
	* base/arch/arm/hal/hal.* (rtai_syscall_trampoline): added USI SRQ call
	* base/include/asm-arm/rtai_hal.*: added RTAI_IFLAG

2004-02-14  Paolo Mantegazza  <mantegazza@aero.polimi.it>

	* base/include/asm-arm/rtai_use.h: added the new arch specific USI.
	* base/arch/i386/hal.*: modified deferred scheduling in interrupt 
	  handlers to avoid too many indirections, related variables
	  declared here instead than in sched.c.
	* base/arch/arm/hal.*: modified deferred scheduling in interrupt 
	  handlers to avoid too many indirections, as in i386.
	* base/sched/sched.*: sched locking variables from hal.c, added
	  hook for deferred scheduling in isr.
	* base/sched/api.c: removed hook for deferred scheduling in isr.

2004-02-06  Paolo Mantegazza  <mantegazza@aero.polimi.it>

	* base/include/rtai_use.h: reworked to use srq instead of LXRT for
	  calling USI related services, so that they do not depend from the
	  scheduler anymore.
	* base/include/asm/rtai_use.h: added the new arch specific USI 
	  support, so that it should be easy to have USI on non x86 also.
	* base/arch/i386/hal.*: user space syscall extended to support USI 
	* base/tasklets.c: ensure interrupt are enabled at exiting the support
	  tasklet thread.
	* base/usi/README: updated to the new USI setup; this is the only
	  file of interest; the rest of all the usi directory content is of
	  no use anymore.

2004-02-04  Paolo Mantegazza  <mantegazza@aero.polimi.it>

	* base/scripts/rtai_load.in: extended to allow to execute an 
	  application with a user command list.

2004-01-31  Michael Neuhauser  <mike@firmix.at>

	* base/arch/arm/patches/ep9301_hal17_2.4.21-rmk1-crus1.4.2.patch:
	new Adeos patch, replaces ep9301_hal16_2.4.21-rmk1-crus1.4.2.patch;
	see ep9301_hal17_2.4.21-rmk1-crus1.4.2.ChangeLog for changes (short
	summary: the new version (r17c1) is a lot better than the previous
	version (r16c255))
	* base/arch/arm/hal/hal.{c,immed,piped}: align rtai_realtime_irq[]
	on L1_CACHE_BYTES; removed "hard irq in trap handler" warning (this
	can't happen, hw-irqs are now enabled for all event handlers)
	* base/include/asm-arm/rtai_lxrt.h (_lxrt_context_switch): use Linux
	switch_to() (which is no longer changed by Adeos patch)

2004-01-25  Roberto Bucher  <roberto.bucher@supsi.ch>

	* rtai-lab/xrtailab.cpp: Fixed problem with rt_VECTOR type in
	matlab7
	* rtai-lab/matlab/rtmain.c: Fixed problem with rt_VECTOR type in
	matlab7
	
2004-01-24  Michael Neuhauser  <mike@firmix.at>

	* configure.in: allow CONFIG_RTAI_SCHED_LXRT to be enabled for ARM,
	removed old ARM sub-architectures (SA1110, CLPS711X, PXA), added new
	ARM sub-architecture (EP9301)
	* configure, all GNUmakefile.in: regenerated because of above change

2004-01-24  Roberto Bucher  <roberto.bucher@supsi.ch>

	* rtai-lab/xrtailab.cpp: Fixed problem with the counter by parameter
	batch download.
	
2004-01-23  Michael Neuhauser  <mike@firmix.at>

	* base/arch/arm, base/include/asm-arm: RTAI/ARM over Adeos rewrite,
	supports kernel and user-space. Only sub-architecture supported is
	EP9301 (ARM920T, ARMv5). Old stuff was tagged with
	"before_arm_over_adeos".

2004-01-18  Roberto Bucher  <roberto.bucher@supsi.ch>

	* rtai-lab/matlab/ptinfo.tlc: new <matlab7>rtw/c/tlc/mw/ptinfo.tlc
	which correct problems with simulink block names in Matlab 7 (R14).
	This new ptinfo.tlc file has been provided by Mathworks and fix the 
	problem

2005-01-18  Philippe Gerum  <rpm@xenomai.org>

	* doc: Fix generation and rebuild.

2004-01-18  Roberto Bucher  <roberto.bucher@supsi.ch>

	* rtai-lab/matlab/rtmain.c: new version compatible with Matlab7 and
	Matlab 6.5.
	* rtai-lab/scilab/rtmain.c: Better handling of Ctrl-C.
	* rtai-lab/scilab/devices/*: Implemented new interface.
	* rtai-lab/scilab/macros/RTAI/*: Implemented new interface.
	

2004-01-18  Paolo Mantegazza  <mantegazza@aero.polimi.it>

	* base/sched/sched.*: use gobal syncranisation to protect a possible
	scheduling.
	* base/arch/i386/hal/hal.*: reallow use of frame pointers in kernel
	configuration (hacking section);

2004-01-07  Michael Neuhauser  <mike@firmix.at>

	* testsuite/user/switches.c: set stack size of the threads herd to
	  a reasonable size, to allow execution with relatively small RAM
	  availability (Paolo Mantegazza added a copy using of RTAI proper
	  user space threads).

2004-01-07  Paolo Mantegazza  <mantegazza@aero.polimi.it>

	* base/sched/sched.c, base/include/asm-i38/rtai_lxrt.h: modified
	  support for using Linux syscalls to have it arch independent
	  (specific remarks from Michael Neuhauser).
	* base/include/rtai_lxrt.h: added inlines to create RTAI proper
	  user space threads.
	* base/tasklets/tasklets.c, base/include/rtai_tasklets.h: modified 
	  to use RTAI proper user space threads.
	* base/usi/usi.c, base/include/rtai_usi.h: modified to use native 
	  user irq tasks (found in api.c).

2004-01-05  Paolo Mantegazza  <mantegazza@aero.polimi.it>

	* base/sched/sched.c: modified support for TSC emulation on 486s,
	  to avoid clashes against non x86 archs (specific remarks from 
	  Michael Neuhauser)

2004-01-05  Michael Neuhauser  <mike@firmix.at>

	* base/sched/sched.c: minidemonisation of LXRT support kernel threads,
	  some code reordering in RR_YIELD.

2004-01-05  Paolo Mantegazza  <mantegazza@aero.polimi.it>

	* base/arch/i386/hal/hal.c: do not load RTAI support if the local
	  APIC has been configured in Linux but is not available.
	* base/sched/sched.immed: inserted a macro call to enable hard 
	  interrupts in all ADEOS events intercept functions; the macro is
	  arch dependent and must be defined in the arch specific 
	  rtai_lxrt.h.

2004-12-31  Paolo Mantegazza  <mantegazza@aero.polimi.it>

	* base/include/asm-i386/rtai_hal.h, rtai_lxrt.h: got rid of 
	  __USE_APIC__, by referring to CONFIG_X86_LOCAL_APIC directly.
	* base/arch/i386/hal.c: fixed definition of NR_IRQS for the 
	 UP local APIC usage without IO-APIC.

2004-12-29  Paolo Mantegazza  <mantegazza@aero.polimi.it>

        * base/include/asm-i386/rtai_emulate_tsc.h: to help forcing TSC
	  emulation on machines that have it.
        * base/include/asm-i386/rtai_hal.h: modified rdtsc from inline
	  to define to allow undefinition when TSC emulation is forced;
	  added inclusion of "rtai_emulate_tsc.h".
        * base/sched/sched.c: added the possibility of simulating non TSC 
	  machines on TSC ones, it helps developping 486 embedded systems
	  without having one available yet.

2004-12-29  Paolo Mantegazza  <mantegazza@aero.polimi.it>

	* First big real commit with the structuring needed for a fully 
	LXRT based release. Changes to the starting baseline:
	- The scheduler should have no x86 specific feature in it 
          anymore, all the arch dependent parts should be in appropriate
	  arch specific header files;
	- Kernel space only operation maintained within LXRT;
	- Use of the APIC timer, when enabled, with UP also;
	- All RTAI ways from user to kernel space, i.e. srq and LXRT,
	  unified in a single call; x86 verified, all other archs should
	  follow suite;
	- Possibility of using the standard Linux syscall for LXRT,
	  arch independent hopefully;
	- Restated automatic hard/soft/hard switches when a Linux
	  syscall is made while RTAI is in hard real time mode, recovery
	  to hard mode in the syscall return path also;
	- IRQ specific tasks native within the scheduler, so the USI way
	  is now simmetrically available in kernel/user space; USI is
	  kept for compatibility only, its use should be avoided;
	- The suspend API has been expanded in the standard RTAI way, i.e.:
	  suspend/suspend_if/suspend_until/suspend_timed, to support RTAI
	  IRQ tasks; available independently also;
	- Prepared to have real time irqs either dispatched "immediately" 
	  or "piped" ("immed"-"piped" mode); "piped" will be the default.
	* Only a rough preliminary testing of the all stuff has been carried 
	  out and, at the moment it is i386 only.

2004-12-09  Paolo Mantegazza  <mantegazza@aero.polimi.it>

	* Started: baseline from 3.1r2.
