       *** SERVING LINUX SYSCALLS IN RTAI HARD REAL TIME MODE ***

The default RTAI way of dealing with Linux syscalls done while in hard real
time consists in moving a task wanting to use Linux back to soft mode, 
recovering it to hard real time again as soon as possible afterward. See the 
related RTAI configuration helper for an explanation of the different available 
modes to implement the "as soon as possible" above on various archs.

This README documents possible alternative ways to access Linux services from 
hard real time RTAI applications in user space. Such a support is based on the 
creation of a general purpose server thread that takes over Linux requests. 

It must be noticed that if Linux is to be used synchronously at the very moment
Linux is called the task becomes timed by Linux, wherever a Linux server is 
used or not. So hard real time constraints cannot be satisfied anyhow. The use 
of a Linux server has an advantage though. In fact it takes just two context 
switches, in place of the four used by hard-soft-hard transitions. Moreover it 
ensures that RTAI returns to hard real time immediately after the Linux syscall 
has finished while, if the architecture does not support the immediate Linux 
syscall mode reliably for all Linux syscalls, there will be the need to wait 
for a call to an RTAI function to go back in RTAI hard real time fully. That 
will add even far more latencies when a hard RTAI task does some processing 
for a significant amount of time after the Linux syscall, without using any 
RTAI service. So, provided it is allowed loosing real time, installing a server 
might be the best way to interact with Linux anyhow.

There are however instances in which Linux can be used asynchronously. In 
such cases RTAI hard real time tasks might use Linux without loosing hard
real time determinism. Such a capability can be implemented in many ways, the 
one chosen by RTAI is based on a buffering of async Linux syscalls mated to an 
optional callback function mechanism to help implementing any user own async 
call policy. Beware of not reusing read/write data buffers made available to 
async calls though. If you do not want, or cannot, check async terminations to 
avoid running the risc of reusing an yet unserved buffer use RTAI dynamic 
memory or SCB to allocate them in real time, freeing them afterward possibly 
with the help of the support callback function. 
Async support is a bit tricky but, provided one cares of what said above, it
should work always when Linux syscalls args are fully contained in the passed
registers structure. That is not the case for a few Linux syscalls that are
multiplexed within a single framework, wheres libc can end in building a 
hidden object on the stack so that it is not assured it will be available at 
the time the server uses it. On some archs a notable example of that is the 
socketcall, but RTAI should already care of it appropriately. There remain 
nonetheless the chance of other instances to be cared as well. So beware that 
some async calls might not work with a few Linux services yet, in which case 
you should let us know about it, for a possible fix.

Provided the socketcall has been intercepted well you should be able to do many
IO operations asynchronously, e.g.: dumping data directly to disk, Linux ipcs 
and POSIX mq, fifos, pipes, serial communications etc. etc. In many applications
one often requires RTAI specific IO drives just to avoid loosing real time
for communicatons with non real time support/interface processes and tasks. 
The async server should be of much help in such cases by letting you use 
standard Linux, with the ensuing advantage of needing not any special hard
real time driver.

How it works
------------

By using the functions described below a server thread is created that will
block waiting for parent task requests to Linux. Whenever the RTAI scheduler 
intercepts a Linux syscall in hard real time mode it passes it to the server 
thread and:
- remains waiting for its execution if in sync mode;
- returns immediately if in async mode.
The server carries out the syscall and:
- resumes the hard real time parent, returning what returned by Linux, if in 
sync mode:
- calls a callback function, if one has been made available, in async mode.

As said in sync mode real time is lost, but there will be two task switches per
Linux service request only, while there will be four in no sync server is used.
In async mode there is no need of any task switch as the server will execute 
in soft mode when there will be no RTAI real time activity any more.
The need of copying data in registers is responsible for most of the penalty 
you have to pay for using a Linux server. The related response will not be so 
bad, far better than other way anyhow.
Let us stress one more that this is a far better alternative way to what the 
RTAI scheduler will have to do anyhow, i.e. make you soft and recover hard mode 
at the next RTAI proper service call, which will require four task switches, 
keeping you in Linux hands from the Linux syscall till RTAI is used again. 
With a server instead you will stay soft just either till Linux has finished 
servicing your request, when in sync mode, or keep working in real time, when
in async mode.

API Functions prototypes
------------------------

The available functions are:

- int rt_create_linux_syscall_server(RT_TASK *task, int mode, 
  void (*callback_fun)(long, long), int nr_bufd_async_calls);
general call to create a Linux syscall server; a zero return meaning success, 
non zero a failure in setting the server up; a NULL task means the current one; 
a NULL callback_fun is allowed. It will operate according to mode setting, 
either SYNC_LINUX_SYSCALL or ASYNC_LINUX_SYSCALL. Beware of using an 
appropriate nr_bufd_async_calls. If async requests overrun the latest will be 
discarded till some space is available again.

- void rt_set_linux_syscall_mode(int mode, void (*callback_fun)(long, long);
to switch between sync and async mode and, possibly, change the call back 
function, if the related pointer in not NULL.
DO NOT USE it to set the async mode for a server created with the simpler
rt_linux_syscall_server_create, see below, as no buffering will be available 
in such a case.

- void *rt_sync_async_linux_syscall_server_create(RT_TASK *task, int mode,
  void (*callback_fun)(long, long), int nr_bufd_async_calls);
legacy interface, the same as:
rt_create_linux_syscall_server(task, mode, callback_fun, nr_bufd_async_calls).

- void *rt_linux_syscall_server_create(RT_TASK *task);
legacy call, the same as:
rt_create_linux_syscall_server(task, SYNC_LINUX_SYSCALL, NULL, 1).

Examples
-------

They are in RTAI "showroom" CVS: linux_server and printer_server.

Paolo.
