User space RTAI syscalls have 16 extensions slots. They allow any user to
extend RTAI with her/his own user space callable APIs without touching
RTAI itself. For the most efficient inline usage of any extension user slots 
must be assigned statically. RTAI itself uses a few extension slots for some
of its native addons, as listed below.

Those already used by modules found in this distributions are:
0  - RTAI itself (hardwired),
1  - tasklets    (hardwired),
9  - comedi,
10 - fifos,
14 - serial,
15 - rtdm.

So you can reuse the above slots only if you are not using the related modules
found in this distribution. In any case check the value returned by: 
set_rt_fun_ext_index.

N.B. (hardwired) above means they are assumed as basic RTAI proper extensions.
Nonetheless extension 1 do check if it can install in its hardwired slot,
exiting their installation in error, by using back doors installed in LXRT. 
So you can make the related slot yours if tasklets are not being used by your 
applications, __NEVER__ use 0. In any case you'd better use the other many 
free slots available to avoid any trouble.

If in doubt about slots engaged already use something like the following piece
of code in your extension module to discover them:

#define MAX_LXRT_EXT 16
do {
	int i;
	struct rt_fun_entry fun;
	for (i = 0; i < MAX_LXRT_EXT; i++) {
		if (set_rt_fun_ext_index(&fun, i) < 0) {
			rt_printk("< LXRT SLOT %d ENGAGED >\n", i);
		} else {
			reset_rt_fun_ext_index(&fun, i);
		}
	}
} while (0);

