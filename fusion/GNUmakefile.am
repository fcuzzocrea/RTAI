ACLOCAL_AMFLAGS=-I config/autoconf

SUDO=sudo

SUBDIRS = \
	include \
	nucleus \
	arch \
	skins \
	drivers \
	testsuite \
	scripts \
	@RTAI_MAYBE_DOCDIR@ \
	$(subdirs) \
	config

EXTRA_DIST = makefile Kconfig README.INSTALL README.QUICKINSTALL TROUBLESHOOTING @RTAI_MAYBE_SIMDIR@

DISTCLEANFILES = .rtai_config .rtai_config.old .cfok .cfchanged

DISTCHECK_CONFIGURE_FLAGS=--with-kconfig-file=$(top_srcdir)/arch/i386/rtai_config.distcheck

all-recursive install-recursive: nucleus/GNUmakefile clean-if-reconfigured

nucleus/GNUmakefile: @RTAI_LINUX_DIR@/.config
	@echo "*****************************************" ; \
	 echo "*  The Linux configuration has changed  *" ; \
	 echo "*  forcing 'make reconfig' ...          *" ; \
	 echo "*****************************************" ; \
	$(MAKE) reconfig

clean-if-reconfigured:
	@if test -r .cfchanged ; then \
	   rm -f .cfchanged ; \
	   echo "****************************************" ; \
	   echo "*  Your RTAI configuration has changed *" ; \
	   echo "*  forcing 'make clean' ...            *" ; \
	   echo "****************************************" ; \
	   $(MAKE) clean ; \
	fi

reconfig xconfig gconfig mconfig menuconfig config oldconfig:
	@$(MAKE) -f $(srcdir)/makefile $@ \
	srctree=$(srcdir) ARCH=@RTAI_HOST_STRING@ CROSS_COMPILE=@CROSS_COMPILE@

if CONFIG_RTAI_OLD_FASHIONED_BUILD
clean-local:
	rm -fr modules .cfchanged

distclean-local:
        test -d $(top_builddir)/config/kconfig && \
	$(MAKE) -C $(srcdir)/config/kconfig \
	-f Makefile.kconfig distclean srctree=$(srcdir) || : ; \
	find . -name autom4te.cache | xargs rm -fr
else
clean-local:
	rm -f .cfchanged

distclean-local:
	test -d $(top_builddir)/config/kconfig && \
	$(MAKE) -C $(top_builddir)/config/kconfig \
	-f @abs_srcdir@/config/kconfig/Makefile.kconfig distclean \
	srctree=@abs_srcdir@ || :
endif

install-data-local: .rtai_config
	$(mkinstalldirs) $(DESTDIR)$(pkgdatadir)
	$(INSTALL_DATA) .rtai_config $(DESTDIR)$(pkgdatadir)/config-$(PACKAGE)-$(VERSION)
	rm -f $(DESTDIR)$(prefix)/build
	$(LN_S) @abs_top_builddir@ $(DESTDIR)$(prefix)/build
	rm -f $(DESTDIR)$(prefix)/source
	$(LN_S) @abs_srcdir@ $(DESTDIR)$(prefix)/source

install-exec-local: devices

dist-hook:
	$(MAKE) -C $(distdir)/config/kconfig \
	-f Makefile.kconfig distclean srctree=$(distdir)
	rm -fr `find $(distdir) -name CVS  -o -name '.#*' \
		-o -name '*~' -o -name autom4te.cache`
	test -e $(srcdir)/doc || rm -rf $(distdir)/doc

dev devices:
	@if test x`id -u` = x0; then \
	   sudo=; \
	else if test \! "x`type $(SUDO)`" = x; then \
	   echo "sudo found (sudo is $(SUDO)), testing it..."; \
	   $(SUDO) true && sudo="$(SUDO)" || { \
echo '*** Warning: you are not super-user and sudo does not work, real-time\
devices'; \
echo '*** nodes will not be created.'; \
echo '*** If you do not create these devices by hand, RTAI test programs will\
not'; \
echo '*** work.'; \
echo '*** To create these devices please run "make devices" with super-user'; \
echo '*** privileges.'; \
	     exit 0; }; \
	   echo sudo is working.; \
	   fi; \
	fi; \
	$(mkinstalldirs) $(DESTDIR)/dev; \
	for n in `seq 0 @RTAI_PIPE_NRDEV@`; do \
	   f="$(DESTDIR)/dev/rtp$$n"; \
	   if test \! -c $$f; then \
	      $$sudo mknod -m 666 $$f c 150 $$n; \
	   fi; \
	done ; \
	if test \! -c /dev/rtheap; then \
	  $$sudo mknod -m 666 /dev/rtheap c 10 254; \
	fi

install-nodev:
	$(MAKE) SUDO=false install

uninstall-local:
	$(RM) $(DESTDIR)$(pkgdatadir)/config-$(PACKAGE)-$(VERSION)

.PHONY: reconfig xconfig gconfig mconfig menuconfig config oldconfig clean-if-reconfigured dev devices
