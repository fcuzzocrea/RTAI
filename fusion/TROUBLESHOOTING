This file is a troubleshooting guide about various known issues,
addressed in a Q&A form. The material is divided into several
sections, depending on whether it is arch-specific or generic.

                           GENERIC
===================================================================

Q: My user-space application has unexpected latencies which seem to
appear when transitioning from primary (mere RTAI) to secondary
(shielded Linux) real-time modes. Why?

A: Such transition requires to wake up the Linux task underlying your
real-time thread when running in secondary mode, since the latter
needs to leave the RTAI domain for executing under the control of the
regular Linux scheduler. Therefore, it all depends on the Linux kernel
granularity, i.e. its ability to reach the next rescheduling point as
soon as such wakeup has been requested. Additionally, the task wakeup
request is performed from a virtual interrupt handler which has to be
run from the Linux domain upon request from the RTAI domain, so the
time required to handle and dispatch this interrupt outside of any
critical kernel section also needs to be accounted for. Even if the
kernel granularity improves at each new release, there are still a few
catches:

o Although the use of DMA might induce additional interrupt latency
due to bus bandwidth saturation, disabling it for disk I/O is a bad
idea when using mixed real-time modes. This is due to the fact that
using PIO often leads to lengthy non-preemptible sections of kernel
code being run from e.g. IDE drivers, from which pending real-time
mode transitions could be delayed. In the same vein, make sure that
your IDE driver runs in unmasked IRQ mode. In any case, a quick check
using the "hdparm" tool will help:

# hdparm -v /dev/hda

/dev/hda:
 ...
 unmaskirq    =  1 (on)
 using_dma    =  1 (on)
 ...

Even if your application does not directly request disk I/O, remember
that the kernel routinely performs housekeeping duties which do, like
filesystem journal updates or VM commits to the backing store, so
latencies due to improper disk settings may well trigger apparently
randomly. Of course, if your application only operates in primary mode
during all of its time critical duties, i.e. never request Linux
syscalls, it will not be adversely affected by DMA deactivation or IDE
masking, since it will remain in the RTAI domain, and activities from
such domain can preempt any activity from the Linux domain, including
disk drivers.

______________________________________________________________________

Q: Any RTAI syscall invoked by my user-space application fails with
error code -38 (-ENOSYS).

A1: Did you load the required modules?
i.e. rtai_hal.ko + rtai_nucleus.ko + rtai_native.ko? Normally, you
should be using a run script (see rtai-load) that does this for you;
but if you don't, make sure to load this modules by hand before
launching your application.
A2: If those modules are loaded but the error persists, check that
your RTAI configuration enables the real-time support in user-space,
in the top-level "Nucleus" menu.

======================================================================

                             x86

======================================================================

Q: When inserting rtai_hal.ko, I get a message in the console saying :
"RTAI: Intel chipset found and SMI workaround not enabled, you may
encounter high interrupt latencies." What should I do ?

A: First you should run the latency test under some load and see if
you experience any high latency ("high" meaning more than, say, 100
micro-seconds). If you do not observe any such latency, then this
warning is harmless, and if you find it annoying, you may disable "SMI
detection" in RTAI configuration menu. You can skip the rest of this
section.

If you observe any high latency then you have a problem with SMI, and
this warning was intended for you. But the RTAI configuration menu 
allow you to enable two workarounds which may help you. These 
workarounds may be found in the Machine/SMI workaround sub-menu of 
RTAI configuration menu.

The first workaround which you should try is to disable all SMI
sources. In order to do this, in the RTAI configuration menu, select
the options "Enable SMI workaround" and "Globally disable SMI". This
option is the safest workaround, because when enabled, no SMI can
interfere with hardware interrupt management behind your back and
cause high latencies.  Once this workaround enabled, you should run
the latency test again, verify that your high latency disappeared but
most importantly, verify that every peripheral you intend to use with
RTAI is working properly. If everything is working properly, then you
are done with SMI.

If some peripheral is not working properly, then it probably needs
SMI, in which case you can not simply disable SMI globally, you will
need to disable all SMI sources on your system except the SMI needed
by your peripheral. This is a much less safe choice, since RTAI has to
know all SMI sources to disable them, one by one. In order to choose
this second workaround, unselect the option "Globally disable SMI",
and select the option corresponding to your peripheral. For example,
if you need legacy USB emulation to get your USB mouse working, select
the option "Enable legacy USB emulation". You should then run the
latency test again and verify that you do not observe any high latency
and that all your peripherals are functioning correctly. If you can
not find your peripheral in the list proposed in the RTAI
configuration menu, drop a mail to the RTAI mailing list, we will try
and possibly add the proper option if needed. If when running the
latency test again, your peripheral is working properly and you still
observe high latencies, then you are out of luck, the peripheral you
want is likely to be the cause of such latencies.

______________________________________________________________________


Q: I have no SMI in the picture, but I'm still seeing high latency
spots.  What's next?

A1: Do you have some legacy USB switch at BIOS configuration level? If
yes, switch it off, it is known to induce such latencies.

A2: If no legacy USB switch appears in your BIOS configuration panel,
this does not necessarily mean that there is no support for it, thus
no potential for high latencies; this support might just be forcibly
enabled at boot time.

To solve this, in case your machine has some USB controller hardware,
make sure to enable the corresponding host controller driver support
in your kernel configuration.  For instance, UHCI-compliant hardware
needs CONFIG_USB_UHCI_HCD.  As part of its init chores, the driver
should reset the host controller properly, kicking out the BIOS off
the concerned hardware, and deactivate the USB legacy mode if set in
the same move.

======================================================================

                           PowerPC

======================================================================


======================================================================

Last Updated: Fri Mar  4 19:05:13 CET 2005
