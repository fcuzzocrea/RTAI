mainmenu "RTAI/ia64 configuration"

source Kconfig

source "nucleus/Kconfig"

menu "Machine (ia64)"

config RTAI_HW_APERIODIC_TIMER
	bool "Enable aperiodic timer support"
	default y
	help
	The nucleus can handle aperiodic timers that can be
	programmed in one-shot mode on this architecture. In this
	mode, timing accuracy is higher - since it is not rounded to a
	constant time slice - at the expense of a lesser efficicency
	when many timers are simultaneously active. The aperiodic mode
	gives better results in configuration involving a few threads
	requesting timing services over different time scales that
	cannot be easily expressed as multiples of a single base tick,
	or would lead to a waste of high frequency periodical
	ticks. You can disable this support for this architecture to
	save a few hundreds bytes if you plan to use the system timer
	in periodic mode only.

config RTAI_HW_TIMER_LATENCY
	depends on RTAI_OPT_EXPERT
	string "Timer tuning latency (ns)"
	default 0
	help
	This parameter accounts for the time (in nanoseconds) needed
	to program the underlying time source in one-shot timing mode.
	This value will be used to reduce the scheduling jitter induced
	by the time needed to setup the timer for its next shot. A
	default value of 0 (recommended) will cause this value to be
	estimated by the nucleus at startup.

config RTAI_HW_SCHED_LATENCY
	depends on RTAI_OPT_EXPERT
	string "Scheduling latency (ns)"
	default 0
	help
	Scheduling latency is the time between the termination of an
	interrupt handler and the execution of the first instruction
	of the real-time thread this handler resumes. A
	default value of 0 (recommended) will cause this value to be
	estimated by the nucleus at startup.

config RTAI_HW_STACK_POOL
        string "Number of pre-allocated kernel stacks"
        default 4
        help
	The current implementation for the Itanium architecture
	requires that stacks of RTAI/fusion threads running in kernel
	space be pre-allocated in a separate pool. This parameter
	allows to set the size of this stack spool, which consequently
	defines the maximum number of concurrently runnable
	kernel-based threads at any point in time. Nb: RTAI/fusion
	threads running in user-space are _not_ impacted by this
	limit.

endmenu

source "skins/Kconfig"

source "sim/Kconfig"
