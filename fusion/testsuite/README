RTAI/fusion testsuite
=====================

This directory contains simple test programs illustrating the purpose
and use of RTAI/fusion, an integrated Linux extension closely
cooperating with the standard kernel, in order to provide
deterministic real-time guarantees to regular application processes in
user-space.

1. cruncher/

   This test makes use of the enhanced nanosleep() service based on
   RTAI/fusion's high-precision timer, thus illustrating the
   capability of seamlessly substituting regular Linux syscall
   implementations with RTAI-based ones. It also shows the benefits of
   applying the interrupt shielding technique to Linux tasks with
   respect to execution determinism. To this end, this test program
   also measures the computation jitter of a number crunching loop.

   This test can run with or without RTAI/fusion, thus allowing to
   compare results with vanilla Linux. Type ./run to start a
   RTAI-enabled test, or simply launch ./cruncher as a sudoer to only
   rely on the vanilla kernel RT features.

2. latency/

   This test illustrates the use of a real-time skin in user-space
   which can provide a specific RTOS API to any Linux task. As an
   example, this test is making use of the new native RTAI API which
   is stacked over RTAI/fusion's generic RTOS core in kernel space.

   This example program features a periodic real-time thread measuring
   its scheduling latency over periods of 100 us. Each second, results
   are posted by the sampling thread to a display thread, which in
   turn outputs the latency figures to the screen using standard Linux
   services. This illustrates the seamless migration of RTAI/fusion's
   real-time threads between the RTAI and Linux schedulers, in order
   to perform every system call issued by RTAI-enabled Linux tasks
   from the proper execution context.

   Type ./run to start the test, and ^C to stop it.

3. klatency/

   This test has the very same logic than the latency/ one, but runs
   the sampling thread in kernel space, in a loadable module which
   makes use of the native RTAI API module directly.

   Once computed by the sampling thread, latency figures are
   transmitted to a plain Linux-controlled display task running in
   user-space through a bi-directional pipe communication channel. The
   pipe mechanism is a feature provided by the native RTAI API
   allowing real-time threads in kernel space to exchange messages or
   byte streams with regular Linux tasks.

   Type ./run to start the test, and ^C to stop it.

   In order to run this test properly, make sure that the special
   devices /dev/dbridge* exist, with major 150 and minors 0-31.
