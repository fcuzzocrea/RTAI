- SUPPORT FOR MATRIXX-AUTOCODE IN RTAI USER SPACE:

This directory contains the support for running a code generated by Matrixx
AutoCode, from a SystemBuild model, in hard real time using RTAI-Linux. 
At the moment there is no native Matrixx for Linux but only for Windows. 
So the whole process is a kind of cross development and as such it has 
influenced the making process described in the followings.
The Matrixx version used for this development is the 71.1, so it is the only
one supported.
The RTAI support has been derived from the existing VxWorks template file and
an utility C function, with its specific header file (sa_utils.c and 
sa_utils.h).
The latters had to be modified for a more consisten integration into RTAI-Lab.
Those interested in a comparison of the changes can find the original files
in: "MATRIXX_HOME\mx_71.1\case\ACC\templates\apps\vxworks"
Those changes were carried out following directions suggested at page 5,
chapter 2 of "Matrixx-AutoCode Reference" stating:
"Target-specific utilities (in sa_utils.c) perform hardware, application, and 
C-specific tasks that are required for simulation and testing. They can be 
modified to support the generated code on different target computers."
Also followed where suggestions found at the beginning of the file 
"vxworks.tpl":
"This template can be used as a starting point for tailoring the generated 
code to suit specific embedded targets."

As already pointed out before to use this support you need two operating 
systems: Windows to generate the real-time code via Matrixx AutoCode and 
RTAI-Linux to compile and run the code, using RTAI-Lab. 
RTAI-Linux could be installed also on a virtual machine, like VMware, running 
under Windows, but neither extreme performances nor hard real time can be 
asked for.

--------------------------------------------------------------------------------
WHAT YOU FIND IN THIS DIRECTORY:

-> rtai.tpl:          is the Template File you need to generate Real-Time 
                      code to be run under RTAI.

-> rtmain.c:          is the Real-Time main program that allows the model 
  (rtmain.h)          to be correctly executed under RTAI.
              
-> mxp.c:             contains the functions required to tune on the fly 
  (mxp.h)             simulation parameters.

-> sa_utils.c:        contains some utilities required to implement the file IO
  (sa_utils.h)        (in "Matrixx style").
  
-> /devices:          contains the functions required to the communication 
                      between the Real-Time simulation and RTAI-Lab, only
		      rtai scopes and logs at the moment.
  
-> /examples:         contains two SystemBuild Block diagram examples, described
                      at the end of this README.
                
-> /vxworks-wrappers: contains the files needed to make it easier adapting 
		      Matrixx AutoCode to RTAI-Lab.

--------------------------------------------------------------------------------
HOW TO INSTALL THE SUPPORT:

For RTAI and RTAI-Lab installation consult the specific documentation (you
might have a look at the "RTAI-Lab tutorial", available at www.rtai.org).
Inatllation of RTAI-Lab in Linux come by itself following what indicated in
RTAI README.INSTALL.
To compile the Real-Time code generated from Matrixx AutoCode you need to copy 
the following files:
- sa_defn.h
- sa_fuzzy.c
- sa_fuzzy.h
- sa_math.c
- sa_math.h
- sa_sys.h
- sa_types.h
to the directory "RTAI_INSTALL_DIR/share/rtai/matrixx/matrixx-files" in Linux 
from the directory "MATRIXX_HOME\mx_71.1\case\ACC\src" in Windows (where 
RTAI_INSTALL_DIR is the RTAI installation directory within Linux and
MATRIXX_HOME is the Matrixx installation directory in Windows).
Notice that those are Matrixx files that were found to be needed during the
work carried out during the development of the RTAI-Lab support for Matrixx
so far. It is possible that your application at hand can require other files
distributed within Matrixx. If that happens you'll have just to copy them
in the same Linux place as those mentioned above.

--------------------------------------------------------------------------------
HOW TO USE THE SUPPORT:

1. SystemBuild Block diagram to use RTAI-Lab support.
   
   In order to use RTAI-Lab with the Real-Time model you have to add to your 
   SystemBuild Block diagram the blocks that perform as devices for the 
   communication between the Real-Time simulation and RTAI-Lab.
   At the moment two devices are available:
   - rtai_scope:  monitor signals during real-time simulation;
   - rtai_log:    save signals to a file.
   Other will follow soon, any help to develop new ones is welcomed.
   
   1.1 rtai_scope block.
       With the rtai_scope you can monitor a signal during the Real-Time 
       simulation through RTAI-Lab. To include a rtai_scope in your
       SystemBuild model you have to use the "UserCode" block ( under    
       Palette Browser -> User Programmed ). You can monitor N signals
       together within a single rtai_scope selecting for the block N inputs and 
       connecting the block with N signals.
       In the "UserCode" block paramenters you must set: 
       - "File Name" -> "rtai_log.c";
       - "Function Name" -> "rtai_log";
       - "Number od Integer Parameters" -> 1;
       - "Integer Parameters" -> ID.
       ID is the scope identification number and it must be unique for each
       scope. In RTAI-Lab a label is associated to each scope: SCOPE(ID), 
       where ID is the integer parameter defined in the SystemBuild block.
       
   1.2 rtai_log block.
       With the rtai_log you can save to a file a signal during the Real-Time 
       simulation through RTAI-Lab. To include a rtai_log in your
       SystemBuild model you have to use the "UserCode" block (under    
       Palette Browser -> User Programmed). You can save N signals filed
       together to the same file with the same rtai_log selecting for the 
       block N inputs and connecting the block with N signals.
       In the "UserCode" block parameters you must set: 
       - "File Name" -> "rtai_log.c";
       - "Function Name" -> "rtai_log";
       - "Number od Integer Parameters" -> 1;
       - "Integer Parameters" -> ID.
       ID is the log identification number and it must be unique for each log.
       In RTAI-Lab a label is associated to each log: LOG(ID), 
       where ID is the integer parameter defined in the SystemBuild block.
       
   Via RTAI-Lab you can modify on the fly the very same parameters that you 
   can modify during an Interactive Simulation within SystemBuild environment
   through the Run-Time Variable Editor (RVE). For a list of blocks and 
   parameters supported in RVE see chapter 9 of "Matrixx-SystemBuild User Guide"
   pages 18-19.
   The parameters names in RTAI-Lab are the same as defined in SystemBuild 
   for the corresponding Xmath variable (to obtain a tunable parameter, you 
   must define the parameter value in Xmath environment before code 
   generation).

2. Real-Time code generation.
   
   To generate a Real-Time code to be run under RTAI you have to use the 
   Template File "rtai.tpl" (available in this directory) in the code 
   generation via AutoCode. So you must copy the file "rtai.tpl" on your 
   Windows PC where Matrixx is installed. 
   To generate the code from Xmath you can type the following command:
   
       autocode "BLOCK_NAME", { fmarker, arraymin=3, initmerge, loopmin = 3, \
           ipath="MATRIXX_HOME\mx_71.1\case\ACC\templates", locvarlblkopt, \
           noerr, noinfo, propconst, vectormode=2, nouy, language="c", \
           smcallout, namelen=48, ialg=2, minsf=***, rtf="MODEL_NAME", \
           tplsrc="RTAI_TPL_DIR\rtai.tpl"}
           
   where:
   - MATRIXX_HOME is the path of the directory where you have installed
                  Matrixx;
   - RTAI_TPL_DIR is the path of the directory where you have copied the 
                  Template File "rtai.tpl";
   - BLOCK_NAME   is the name of the SystemBuild SuperBlock name which you 
                  want to generate the code;
   - MODEL_NAME   is the name of the generated files.
   
   The options "ialg" and "minsf" are intended to be used to generate code for
   continuous system. For more information on AutoCode and his options see the
   "Matrixx-Autocode User Guide" and "Matrixx-Autocode Reference". 
   After code generation you must find in your matrixx working directory 
   (you set this directory from Xmath command: file -> Set Directory) the
   following files:
   - appl.h
   - MODEL_NAME.c
   - MODEL_NAME.cmd
   - MODEL_NAME.rtf
   - rtai.dac 

3. Executable generation.

   To generate the executable file to be run under RTAI you have to copy in
   your working directory (on your RTAI-Linux PC) the files "appl.h" and
   "MODEL_NAME.c" generated by Autocode.
   In the working directory you also must copy from the directory
   "RTAI_INSTALL_DIR/share/rtai/matrixx/" (where RTAI_INSTALL_DIR is the RTAI 
   installation directory) the file "Makefile".
   As explained before, see: HOW TO INSTALL THE SUPPORT, any executable 
   generation expects to find the following files:
   - sa_defn.h
   - sa_fuzzy.c
   - sa_fuzzy.h
   - sa_math.c
   - sa_math.h
   - sa_sys.h
   - sa_types.h
   as found in the directory "MATRIXX_HOME\mx_71.1\case\ACC\src", in the 
   directory: "RTAI_HOME/share/rtai/matrixx/matrixx-files", of your RTAI-Linux
   PC.
   
   Typing the command "make MODEL_NAME" you can now generate the executable file
   named "MODEL_NAME" (you can ignore the compilation warnings). During the 
   executable generation others files are created in your working directory, 
   you can delete them typing the command "make clean".
   
   3.1 Compilation options.
       During the compilation you can select two options editing the file 
       "Makefile": 
       - commenting (with a "#") the line "DOUBLE_FLAG = -DAC100FLAG" you 
         select the real numbers representation in singular precision (C 
         type: float), default is double precision (C type: double).
       - the flag "FILEIO_FLAG" is intended to be used when the model need 
         external inputs, a la Matrixx. The external inputs are read from a 
	 file (input data file) in "Xmath {matrixx,ascii} format" (see Matrixx 
         documentation) and, with this flag active, the outputs are 
         automatically saved to a file (output data file) in Xmath format. 
         You select the input/output data files at the beginning of the 
         execution of the Real-Time simulation, you can specify a directory 
         for the input/output data files using the options -P when you launch 
         the executable (see the usage options typing the command 
         "./MODEL_NAME -u"), default the files are searched in the working 
         directory. When you use the "FILEIO_FLAG" option the simulation ended
         according to the last time instant specified in the input data file.
         When the model hasn't external input you can comment the line 
         "FILEIO_FLAG = - DFILE_IO" in the "Makefile" file. In this way the 
         simulation can run forever and if you want save to a file the time 
         history of some signals you have to use the RTAI_LAB options ( by 
         means of LOGS and SCOPES ). 
         You can use the "FILEIO_FLAG" option also with model without external
         inputs, in this way the model outputs are saved to an output file 
         in Xmath format (you must also specify an input file with the time 
         vector). The simulation can't run forever and terminate when the 
         limit storage capability is reached (specified with MAXY in 
         "sa_utils.c" file).
         
4. Execute
         
   To execute the Real-Time code you must load the required RTAI modules
   (you can see the script "loadrtai" in the RTAI-Lab tree), then you 
   can run the code typing "./MODEL_NAME [options]" (to see the list 
   of options type "./MODEL_NAME -u"). In another terminal run 
   RTAI-Lab (xrtailab) to communicate with the real-time code (for more
   information read the README in the main RTAI-Lab directory and the
   "RTAI-Lab tutorial" available at www.rtai.org).
         
--------------------------------------------------------------------------------
EXAMPLES DESCRIPTIONS:

In the examples directory you find two SystemBuild Block diagram examples,
saved in rtf (Real-Time File) format; you can use these examples to test the  
support:
- multisingen.rtf:  is a simple test case where the model output is the sum of
                    two sinewaves. The model is discrete and use different
                    time steps for each sine wave. In the model there are three
                    rtai_scope blocks to monitor the signal via RTAI-Lab and 
                    an rtai_log to save the signals to a file. You can verify
                    the capabilities to modify parameters on the fly via 
                    RTAI-Lab (you have to initialize the parameters value in
                    Xmath environment before code generation) modifying the 
                    frequencies ("freq1" and "freq2") and amplitudes ("amp1" 
                    and "amp2") of the two sine waves. This model has no 
                    external input, so you do not need the "FILEIO_FLAG" 
                    option during the compilation.   
- super_cruise.rtf: is a more complex example taken from an existing Matrixx 
		    example, with a few rtai_scopes and rtai_logs addeed, to 
		    verify communication with RTAI-Lab. This example needs 10
                    input, so you have to use the "FILEIO_FLAG" option during
                    the compilation. You can take the input data file in Matrixx
                    format ("super_cruise.data") from the directory: 
                    "MATRIXX_HOME\mx_71.1\case\ACC\templates\apps\vxworks".
                    You can use this example to compare the results of a 
                    simulation in SystemBuild environment with the results
                    of an RTAI-Lab real time simulation. 
                    
Mattia Mattaboni (mattaboni@aero.polimi.it)
21 December 2006
